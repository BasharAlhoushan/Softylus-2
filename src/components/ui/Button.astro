---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline';
  href?: string;
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  withIcon?: boolean;
}

const { 
  variant = 'primary', 
  href, 
  size = 'md', 
  class: className = '',
  withIcon = false
} = Astro.props;

// Dynamic classes based on variant and size
const variantClasses = {
  primary: 'bg-black text-white hover:shadow-xl',
  secondary: 'bg-white text-black border border-black hover:bg-black hover:text-white',
  outline: 'bg-transparent text-black border border-black hover:bg-black hover:text-white'
};

const sizeClasses = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};

const classes = `
  inline-flex items-center justify-center
  font-medium transition-all duration-300
  ${variantClasses[variant]} 
  ${sizeClasses[size]}
  ${withIcon ? 'group' : ''}
  ${className}
`;
---

{href ? (
  <a href={href} class={classes}>
    <span>
      <slot />
    </span>
    {withIcon && (
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 transform transition-transform duration-300 group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    )}
  </a>
) : (
  <button type="button" class={classes}>
    <span>
      <slot />
    </span>
    {withIcon && (
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 transform transition-transform duration-300 group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    )}
  </button>
)}